
smartslave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000988  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  000009fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb4  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6c  00000000  00000000  00002bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd3  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000059c  00000000  00000000  00004904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081a  00000000  00000000  00004ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe3  00000000  00000000  000056ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000669d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 37       	cpi	r26, 0x75	; 117
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 34 03 	call	0x668	; 0x668 <main>
  74:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Init>:
void ADC_Init(void)
{
	
	#if   ADC_VOLTAGE_REFRENCE    ==  ADC_VREF_AVCC
	
		CLR_BIT(ADMUX,7);
  7c:	3f 98       	cbi	0x07, 7	; 7
		SET_BIT(ADMUX,6);
  7e:	3e 9a       	sbi	0x07, 6	; 7
	
	#endif
	
	#if  ADC_CHANNEL              ==  ADC_CHANNEL_1
	
	SET_BIT(ADMUX,0);
  80:	38 9a       	sbi	0x07, 0	; 7
	
	#endif
	
	#if  ADC_CONVERSION_TRIGGER  ==   ADC_AUTO_TRIGGER
	
	SET_BIT(ADCSRA,5);
  82:	35 9a       	sbi	0x06, 5	; 6
	
	#endif

	#if  ADC_PRESCALER           ==  ADC_PRESC_128
	
	SET_BIT(ADCSRA,0);
  84:	30 9a       	sbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
  86:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
  88:	32 9a       	sbi	0x06, 2	; 6
	
	#endif
	
	#if  ADC_INTERRUPT_STATUS   ==  ADC_INTERRUPT_DISABLE
	
	CLR_BIT(ADCSRA , 3);
  8a:	33 98       	cbi	0x06, 3	; 6
	
	#endif
	
		/*right Adjustment */
	CLR_BIT(ADMUX,5);
  8c:	3d 98       	cbi	0x07, 5	; 7
		//ADC Enable */
	SET_BIT(ADCSRA,7);
  8e:	37 9a       	sbi	0x06, 7	; 6
  90:	08 95       	ret

00000092 <ADC_Read>:
	
	uint16 Digital_Value = 0;
	
	
	/* Start Conversion*/
	SET_BIT(ADCSRA,6);
  92:	36 9a       	sbi	0x06, 6	; 6
	
	#if  ADC_INTERRUPT_STATUS   ==  ADC_INTERRUPT_DISABLE
	
	while( ! GET_BIT(ADCSRA,4) );
  94:	34 9b       	sbis	0x06, 4	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <ADC_Read+0x2>
	
	Digital_Value = ADC_Adjust; //(ADCH << 2) | (ADCL >>6);
  98:	64 b1       	in	r22, 0x04	; 4
  9a:	75 b1       	in	r23, 0x05	; 5
	
	*Analog_Value = ((Digital_Value * 500) / 1024) ;
  9c:	44 ef       	ldi	r20, 0xF4	; 244
  9e:	51 e0       	ldi	r21, 0x01	; 1
  a0:	64 9f       	mul	r22, r20
  a2:	90 01       	movw	r18, r0
  a4:	65 9f       	mul	r22, r21
  a6:	30 0d       	add	r19, r0
  a8:	74 9f       	mul	r23, r20
  aa:	30 0d       	add	r19, r0
  ac:	11 24       	eor	r1, r1
  ae:	23 2f       	mov	r18, r19
  b0:	26 95       	lsr	r18
  b2:	26 95       	lsr	r18
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
  b8:	11 82       	std	Z+1, r1	; 0x01
  ba:	08 95       	ret

000000bc <DcMotor_Init>:
#include "Timer.h"

void DcMotor_Init(void)
{
	
	DIO_SetPinDir(DIO_PORTC ,DIO_PIN3 , DIO_PIN_OUTPUT);
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	63 e0       	ldi	r22, 0x03	; 3
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTC ,DIO_PIN4 , DIO_PIN_OUTPUT);
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	64 e0       	ldi	r22, 0x04	; 4
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
	//DIO_SetPinDir(DIO_PORTD ,DIO_PIN4 , DIO_PIN_OUTPUT);
	
	//DIO_SetPinDir(DIO_PORTB ,DIO_PIN3 , DIO_PIN_OUTPUT);
	
	PWM0_Init();
  d0:	0e 94 47 04 	call	0x88e	; 0x88e <PWM0_Init>
  d4:	08 95       	ret

000000d6 <DcMotor_SetDir>:


void DcMotor_SetDir(DC_MOTOR_DIR dir)
{
	
	switch(dir)
  d6:	88 23       	and	r24, r24
  d8:	19 f0       	breq	.+6      	; 0xe0 <DcMotor_SetDir+0xa>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	61 f0       	breq	.+24     	; 0xf6 <DcMotor_SetDir+0x20>
  de:	08 95       	ret
	{
		
		case CLOCK_WISE_DIR :
		
		DIO_WritePin(DIO_PORTC ,DIO_PIN3,DIO_PIN_HIGH);
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	63 e0       	ldi	r22, 0x03	; 3
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
		DIO_WritePin(DIO_PORTC ,DIO_PIN4,DIO_PIN_LOW);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
		
		break;
  f4:	08 95       	ret
		
		case UNTI_CLOCK_WISE_DIR :
		
		DIO_WritePin(DIO_PORTC ,DIO_PIN3,DIO_PIN_LOW);
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
		DIO_WritePin(DIO_PORTC ,DIO_PIN4,DIO_PIN_HIGH);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	64 e0       	ldi	r22, 0x04	; 4
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 10a:	08 95       	ret

0000010c <DcMotor_SetSpeed>:

void DcMotor_SetSpeed(uint8 speed)
{
	speed *= 10;
	
	PWM0_Generate(speed);
 10c:	88 0f       	add	r24, r24
 10e:	98 2f       	mov	r25, r24
 110:	99 0f       	add	r25, r25
 112:	99 0f       	add	r25, r25
 114:	89 0f       	add	r24, r25
 116:	0e 94 4f 04 	call	0x89e	; 0x89e <PWM0_Generate>
 11a:	08 95       	ret

0000011c <DcMotor_Start>:


void DcMotor_Start(void)
{
	
	PWM0_Start();
 11c:	0e 94 5f 04 	call	0x8be	; 0x8be <PWM0_Start>
 120:	08 95       	ret

00000122 <DcMotor_Stop>:


void DcMotor_Stop(void)
{
	
	DIO_WritePin(DIO_PORTC ,DIO_PIN3,DIO_PIN_LOW);
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	63 e0       	ldi	r22, 0x03	; 3
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
	DIO_WritePin(DIO_PORTC ,DIO_PIN4,DIO_PIN_LOW);
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	64 e0       	ldi	r22, 0x04	; 4
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 136:	08 95       	ret

00000138 <DIO_SetPinDir>:

				break;

			case DIO_PORTD :

				*Val = GET_BIT(PIND,Pin);
 138:	44 23       	and	r20, r20
 13a:	b9 f1       	breq	.+110    	; 0x1aa <DIO_SetPinDir+0x72>
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	09 f0       	breq	.+2      	; 0x142 <DIO_SetPinDir+0xa>
 140:	6b c0       	rjmp	.+214    	; 0x218 <DIO_SetPinDir+0xe0>
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	89 f0       	breq	.+34     	; 0x168 <DIO_SetPinDir+0x30>
 146:	28 f0       	brcs	.+10     	; 0x152 <DIO_SetPinDir+0x1a>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	c9 f0       	breq	.+50     	; 0x17e <DIO_SetPinDir+0x46>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	11 f1       	breq	.+68     	; 0x194 <DIO_SetPinDir+0x5c>
 150:	08 95       	ret
 152:	2a b3       	in	r18, 0x1a	; 26
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_SetPinDir+0x26>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_SetPinDir+0x22>
 162:	82 2b       	or	r24, r18
 164:	8a bb       	out	0x1a, r24	; 26
 166:	08 95       	ret
 168:	27 b3       	in	r18, 0x17	; 23
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinDir+0x3c>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinDir+0x38>
 178:	82 2b       	or	r24, r18
 17a:	87 bb       	out	0x17, r24	; 23
 17c:	08 95       	ret
 17e:	24 b3       	in	r18, 0x14	; 20
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinDir+0x52>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinDir+0x4e>
 18e:	82 2b       	or	r24, r18
 190:	84 bb       	out	0x14, r24	; 20
 192:	08 95       	ret
 194:	21 b3       	in	r18, 0x11	; 17
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDir+0x68>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDir+0x64>
 1a4:	82 2b       	or	r24, r18
 1a6:	81 bb       	out	0x11, r24	; 17
 1a8:	08 95       	ret
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	91 f0       	breq	.+36     	; 0x1d2 <DIO_SetPinDir+0x9a>
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <DIO_SetPinDir+0x82>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	d9 f0       	breq	.+54     	; 0x1ea <DIO_SetPinDir+0xb2>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	29 f1       	breq	.+74     	; 0x202 <DIO_SetPinDir+0xca>
 1b8:	08 95       	ret
 1ba:	2a b3       	in	r18, 0x1a	; 26
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_SetPinDir+0x8e>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_SetPinDir+0x8a>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	8a bb       	out	0x1a, r24	; 26
 1d0:	08 95       	ret
 1d2:	27 b3       	in	r18, 0x17	; 23
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_SetPinDir+0xa6>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_SetPinDir+0xa2>
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	87 bb       	out	0x17, r24	; 23
 1e8:	08 95       	ret
 1ea:	24 b3       	in	r18, 0x14	; 20
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_SetPinDir+0xbe>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_SetPinDir+0xba>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	84 bb       	out	0x14, r24	; 20
 200:	08 95       	ret
 202:	21 b3       	in	r18, 0x11	; 17
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_SetPinDir+0xd6>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_SetPinDir+0xd2>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	81 bb       	out	0x11, r24	; 17
 218:	08 95       	ret

0000021a <DIO_WritePin>:
 21a:	44 23       	and	r20, r20
 21c:	b9 f1       	breq	.+110    	; 0x28c <DIO_WritePin+0x72>
 21e:	41 30       	cpi	r20, 0x01	; 1
 220:	09 f0       	breq	.+2      	; 0x224 <DIO_WritePin+0xa>
 222:	6b c0       	rjmp	.+214    	; 0x2fa <DIO_WritePin+0xe0>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	89 f0       	breq	.+34     	; 0x24a <DIO_WritePin+0x30>
 228:	28 f0       	brcs	.+10     	; 0x234 <DIO_WritePin+0x1a>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	c9 f0       	breq	.+50     	; 0x260 <DIO_WritePin+0x46>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	11 f1       	breq	.+68     	; 0x276 <DIO_WritePin+0x5c>
 232:	08 95       	ret
 234:	2b b3       	in	r18, 0x1b	; 27
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_WritePin+0x26>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_WritePin+0x22>
 244:	82 2b       	or	r24, r18
 246:	8b bb       	out	0x1b, r24	; 27
 248:	08 95       	ret
 24a:	28 b3       	in	r18, 0x18	; 24
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_WritePin+0x3c>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_WritePin+0x38>
 25a:	82 2b       	or	r24, r18
 25c:	88 bb       	out	0x18, r24	; 24
 25e:	08 95       	ret
 260:	25 b3       	in	r18, 0x15	; 21
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_WritePin+0x52>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_WritePin+0x4e>
 270:	82 2b       	or	r24, r18
 272:	85 bb       	out	0x15, r24	; 21
 274:	08 95       	ret
 276:	22 b3       	in	r18, 0x12	; 18
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_WritePin+0x68>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_WritePin+0x64>
 286:	82 2b       	or	r24, r18
 288:	82 bb       	out	0x12, r24	; 18
 28a:	08 95       	ret
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	91 f0       	breq	.+36     	; 0x2b4 <DIO_WritePin+0x9a>
 290:	28 f0       	brcs	.+10     	; 0x29c <DIO_WritePin+0x82>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	d9 f0       	breq	.+54     	; 0x2cc <DIO_WritePin+0xb2>
 296:	83 30       	cpi	r24, 0x03	; 3
 298:	29 f1       	breq	.+74     	; 0x2e4 <DIO_WritePin+0xca>
 29a:	08 95       	ret
 29c:	2b b3       	in	r18, 0x1b	; 27
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_WritePin+0x8e>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_WritePin+0x8a>
 2ac:	80 95       	com	r24
 2ae:	82 23       	and	r24, r18
 2b0:	8b bb       	out	0x1b, r24	; 27
 2b2:	08 95       	ret
 2b4:	28 b3       	in	r18, 0x18	; 24
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_WritePin+0xa6>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_WritePin+0xa2>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	88 bb       	out	0x18, r24	; 24
 2ca:	08 95       	ret
 2cc:	25 b3       	in	r18, 0x15	; 21
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_WritePin+0xbe>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_WritePin+0xba>
 2dc:	80 95       	com	r24
 2de:	82 23       	and	r24, r18
 2e0:	85 bb       	out	0x15, r24	; 21
 2e2:	08 95       	ret
 2e4:	22 b3       	in	r18, 0x12	; 18
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_WritePin+0xd6>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_WritePin+0xd2>
 2f4:	80 95       	com	r24
 2f6:	82 23       	and	r24, r18
 2f8:	82 bb       	out	0x12, r24	; 18
 2fa:	08 95       	ret

000002fc <DIO_TogglePin>:



void DIO_TogglePin(uint8 port , uint8 pin)
{
	switch(port)
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	89 f0       	breq	.+34     	; 0x322 <DIO_TogglePin+0x26>
 300:	28 f0       	brcs	.+10     	; 0x30c <DIO_TogglePin+0x10>
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	c9 f0       	breq	.+50     	; 0x338 <DIO_TogglePin+0x3c>
 306:	83 30       	cpi	r24, 0x03	; 3
 308:	11 f1       	breq	.+68     	; 0x34e <DIO_TogglePin+0x52>
 30a:	08 95       	ret
	{
		case DIO_PORTA :
		Toggle_BIT(PORTA , pin);
 30c:	2b b3       	in	r18, 0x1b	; 27
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_TogglePin+0x1c>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_TogglePin+0x18>
 31c:	82 27       	eor	r24, r18
 31e:	8b bb       	out	0x1b, r24	; 27
		break;
 320:	08 95       	ret
		
		case DIO_PORTB :
		Toggle_BIT(PORTB , pin);
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_TogglePin+0x32>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_TogglePin+0x2e>
 332:	82 27       	eor	r24, r18
 334:	88 bb       	out	0x18, r24	; 24
		break;
 336:	08 95       	ret
		
		case DIO_PORTC :
		Toggle_BIT(PORTC , pin);
 338:	25 b3       	in	r18, 0x15	; 21
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_TogglePin+0x48>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_TogglePin+0x44>
 348:	82 27       	eor	r24, r18
 34a:	85 bb       	out	0x15, r24	; 21
		break;
 34c:	08 95       	ret
		
		case DIO_PORTD :
		Toggle_BIT(PORTD , pin);
 34e:	22 b3       	in	r18, 0x12	; 18
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_TogglePin+0x5e>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_TogglePin+0x5a>
 35e:	82 27       	eor	r24, r18
 360:	82 bb       	out	0x12, r24	; 18
 362:	08 95       	ret

00000364 <GetDiv>:
{
	uint8 pos[2] = {0x80 , 0xC0};
		
	LCD_WriteCommand(pos[row]+col);
		
}
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	28 0f       	add	r18, r24
 370:	e9 f0       	breq	.+58     	; 0x3ac <GetDiv+0x48>
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	dc 01       	movw	r26, r24
 37c:	cb 01       	movw	r24, r22
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	aa 1f       	adc	r26, r26
 384:	bb 1f       	adc	r27, r27
 386:	6c 01       	movw	r12, r24
 388:	7d 01       	movw	r14, r26
 38a:	cc 0c       	add	r12, r12
 38c:	dd 1c       	adc	r13, r13
 38e:	ee 1c       	adc	r14, r14
 390:	ff 1c       	adc	r15, r15
 392:	cc 0c       	add	r12, r12
 394:	dd 1c       	adc	r13, r13
 396:	ee 1c       	adc	r14, r14
 398:	ff 1c       	adc	r15, r15
 39a:	bc 01       	movw	r22, r24
 39c:	cd 01       	movw	r24, r26
 39e:	6c 0d       	add	r22, r12
 3a0:	7d 1d       	adc	r23, r13
 3a2:	8e 1d       	adc	r24, r14
 3a4:	9f 1d       	adc	r25, r15
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	41 f7       	brne	.-48     	; 0x37a <GetDiv+0x16>
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <GetDiv+0x50>
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	08 95       	ret

000003be <LCD_WriteCommand>:
 3be:	cf 93       	push	r28
 3c0:	c8 2f       	mov	r28, r24
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	63 e0       	ldi	r22, 0x03	; 3
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 3e0:	8c 2f       	mov	r24, r28
 3e2:	80 7f       	andi	r24, 0xF0	; 240
 3e4:	8b bb       	out	0x1b, r24	; 27
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	63 e0       	ldi	r22, 0x03	; 3
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 3f0:	8f ec       	ldi	r24, 0xCF	; 207
 3f2:	97 e0       	ldi	r25, 0x07	; 7
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_WriteCommand+0x36>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_WriteCommand+0x3c>
 3fa:	00 00       	nop
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 406:	c2 95       	swap	r28
 408:	c0 7f       	andi	r28, 0xF0	; 240
 40a:	cb bb       	out	0x1b, r28	; 27
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	63 e0       	ldi	r22, 0x03	; 3
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 416:	8f ec       	ldi	r24, 0xCF	; 207
 418:	97 e0       	ldi	r25, 0x07	; 7
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	00 00       	nop
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 42c:	8f e0       	ldi	r24, 0x0F	; 15
 42e:	97 e2       	ldi	r25, 0x27	; 39
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <LCD_Init>:
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	62 e0       	ldi	r22, 0x02	; 2
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	63 e0       	ldi	r22, 0x03	; 3
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	64 e0       	ldi	r22, 0x04	; 4
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	65 e0       	ldi	r22, 0x05	; 5
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	66 e0       	ldi	r22, 0x06	; 6
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	67 e0       	ldi	r22, 0x07	; 7
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 482:	2f ef       	ldi	r18, 0xFF	; 255
 484:	80 e7       	ldi	r24, 0x70	; 112
 486:	92 e0       	ldi	r25, 0x02	; 2
 488:	21 50       	subi	r18, 0x01	; 1
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	90 40       	sbci	r25, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <LCD_Init+0x4c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_Init+0x56>
 492:	00 00       	nop
 494:	83 e3       	ldi	r24, 0x33	; 51
 496:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_WriteCommand>
 49a:	82 e3       	ldi	r24, 0x32	; 50
 49c:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_WriteCommand>
 4a0:	88 e2       	ldi	r24, 0x28	; 40
 4a2:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_WriteCommand>
 4a6:	8c e0       	ldi	r24, 0x0C	; 12
 4a8:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_WriteCommand>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_WriteCommand>
 4b2:	08 95       	ret

000004b4 <LCD_WriteChar>:
 4b4:	cf 93       	push	r28
 4b6:	c8 2f       	mov	r28, r24
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	62 e0       	ldi	r22, 0x02	; 2
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	63 e0       	ldi	r22, 0x03	; 3
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 4d6:	8c 2f       	mov	r24, r28
 4d8:	80 7f       	andi	r24, 0xF0	; 240
 4da:	8b bb       	out	0x1b, r24	; 27
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	63 e0       	ldi	r22, 0x03	; 3
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 4e6:	8f ec       	ldi	r24, 0xCF	; 207
 4e8:	97 e0       	ldi	r25, 0x07	; 7
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_WriteChar+0x36>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_WriteChar+0x3c>
 4f0:	00 00       	nop
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	63 e0       	ldi	r22, 0x03	; 3
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 4fc:	c2 95       	swap	r28
 4fe:	c0 7f       	andi	r28, 0xF0	; 240
 500:	cb bb       	out	0x1b, r28	; 27
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	63 e0       	ldi	r22, 0x03	; 3
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 50c:	8f ec       	ldi	r24, 0xCF	; 207
 50e:	97 e0       	ldi	r25, 0x07	; 7
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <LCD_WriteChar+0x5c>
 514:	00 c0       	rjmp	.+0      	; 0x516 <LCD_WriteChar+0x62>
 516:	00 00       	nop
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	63 e0       	ldi	r22, 0x03	; 3
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_WritePin>
 522:	8f e0       	ldi	r24, 0x0F	; 15
 524:	97 e2       	ldi	r25, 0x27	; 39
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <LCD_WriteChar+0x72>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <LCD_WriteChar+0x78>
 52c:	00 00       	nop
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <LCD_WriteInteger>:
 532:	3f 92       	push	r3
 534:	4f 92       	push	r4
 536:	5f 92       	push	r5
 538:	6f 92       	push	r6
 53a:	7f 92       	push	r7
 53c:	8f 92       	push	r8
 53e:	9f 92       	push	r9
 540:	af 92       	push	r10
 542:	bf 92       	push	r11
 544:	cf 92       	push	r12
 546:	df 92       	push	r13
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	6b 01       	movw	r12, r22
 556:	7c 01       	movw	r14, r24
 558:	99 23       	and	r25, r25
 55a:	5c f4       	brge	.+22     	; 0x572 <LCD_WriteInteger+0x40>
 55c:	8d e2       	ldi	r24, 0x2D	; 45
 55e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_WriteChar>
 562:	f0 94       	com	r15
 564:	e0 94       	com	r14
 566:	d0 94       	com	r13
 568:	c0 94       	com	r12
 56a:	c1 1c       	adc	r12, r1
 56c:	d1 1c       	adc	r13, r1
 56e:	e1 1c       	adc	r14, r1
 570:	f1 1c       	adc	r15, r1
 572:	c7 01       	movw	r24, r14
 574:	b6 01       	movw	r22, r12
 576:	2a e0       	ldi	r18, 0x0A	; 10
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	0e 94 94 04 	call	0x928	; 0x928 <__divmodsi4>
 582:	21 15       	cp	r18, r1
 584:	31 05       	cpc	r19, r1
 586:	41 05       	cpc	r20, r1
 588:	51 05       	cpc	r21, r1
 58a:	09 f4       	brne	.+2      	; 0x58e <LCD_WriteInteger+0x5c>
 58c:	3f c0       	rjmp	.+126    	; 0x60c <LCD_WriteInteger+0xda>
 58e:	c1 e0       	ldi	r28, 0x01	; 1
 590:	0f 2e       	mov	r0, r31
 592:	fa e0       	ldi	r31, 0x0A	; 10
 594:	8f 2e       	mov	r8, r31
 596:	91 2c       	mov	r9, r1
 598:	a1 2c       	mov	r10, r1
 59a:	b1 2c       	mov	r11, r1
 59c:	f0 2d       	mov	r31, r0
 59e:	cf 5f       	subi	r28, 0xFF	; 255
 5a0:	ca 01       	movw	r24, r20
 5a2:	b9 01       	movw	r22, r18
 5a4:	a5 01       	movw	r20, r10
 5a6:	94 01       	movw	r18, r8
 5a8:	0e 94 94 04 	call	0x928	; 0x928 <__divmodsi4>
 5ac:	21 15       	cp	r18, r1
 5ae:	31 05       	cpc	r19, r1
 5b0:	41 05       	cpc	r20, r1
 5b2:	51 05       	cpc	r21, r1
 5b4:	a1 f7       	brne	.-24     	; 0x59e <LCD_WriteInteger+0x6c>
 5b6:	8c 2f       	mov	r24, r28
 5b8:	0e 94 b2 01 	call	0x364	; 0x364 <GetDiv>
 5bc:	4b 01       	movw	r8, r22
 5be:	5c 01       	movw	r10, r24
 5c0:	cc 23       	and	r28, r28
 5c2:	89 f1       	breq	.+98     	; 0x626 <LCD_WriteInteger+0xf4>
 5c4:	0f 2e       	mov	r0, r31
 5c6:	fa e0       	ldi	r31, 0x0A	; 10
 5c8:	4f 2e       	mov	r4, r31
 5ca:	51 2c       	mov	r5, r1
 5cc:	61 2c       	mov	r6, r1
 5ce:	71 2c       	mov	r7, r1
 5d0:	f0 2d       	mov	r31, r0
 5d2:	c7 01       	movw	r24, r14
 5d4:	b6 01       	movw	r22, r12
 5d6:	a5 01       	movw	r20, r10
 5d8:	94 01       	movw	r18, r8
 5da:	0e 94 94 04 	call	0x928	; 0x928 <__divmodsi4>
 5de:	36 2e       	mov	r3, r22
 5e0:	07 2f       	mov	r16, r23
 5e2:	18 2f       	mov	r17, r24
 5e4:	d9 2f       	mov	r29, r25
 5e6:	80 e3       	ldi	r24, 0x30	; 48
 5e8:	82 0f       	add	r24, r18
 5ea:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_WriteChar>
 5ee:	c3 2c       	mov	r12, r3
 5f0:	d0 2e       	mov	r13, r16
 5f2:	e1 2e       	mov	r14, r17
 5f4:	fd 2e       	mov	r15, r29
 5f6:	c5 01       	movw	r24, r10
 5f8:	b4 01       	movw	r22, r8
 5fa:	a3 01       	movw	r20, r6
 5fc:	92 01       	movw	r18, r4
 5fe:	0e 94 94 04 	call	0x928	; 0x928 <__divmodsi4>
 602:	49 01       	movw	r8, r18
 604:	5a 01       	movw	r10, r20
 606:	c1 50       	subi	r28, 0x01	; 1
 608:	21 f7       	brne	.-56     	; 0x5d2 <LCD_WriteInteger+0xa0>
 60a:	0d c0       	rjmp	.+26     	; 0x626 <LCD_WriteInteger+0xf4>
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	0e 94 b2 01 	call	0x364	; 0x364 <GetDiv>
 612:	9b 01       	movw	r18, r22
 614:	ac 01       	movw	r20, r24
 616:	c7 01       	movw	r24, r14
 618:	b6 01       	movw	r22, r12
 61a:	0e 94 94 04 	call	0x928	; 0x928 <__divmodsi4>
 61e:	80 e3       	ldi	r24, 0x30	; 48
 620:	82 0f       	add	r24, r18
 622:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_WriteChar>
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	ff 90       	pop	r15
 630:	ef 90       	pop	r14
 632:	df 90       	pop	r13
 634:	cf 90       	pop	r12
 636:	bf 90       	pop	r11
 638:	af 90       	pop	r10
 63a:	9f 90       	pop	r9
 63c:	8f 90       	pop	r8
 63e:	7f 90       	pop	r7
 640:	6f 90       	pop	r6
 642:	5f 90       	pop	r5
 644:	4f 90       	pop	r4
 646:	3f 90       	pop	r3
 648:	08 95       	ret

0000064a <LCD_Clear>:



void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_WriteCommand>
 650:	08 95       	ret

00000652 <LED0_Init>:
	DIO_WritePin(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
}

void LED0_OFF(void)
{
	DIO_WritePin(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 652:	41 e0       	ldi	r20, 0x01	; 1
 654:	62 e0       	ldi	r22, 0x02	; 2
 656:	82 e0       	ldi	r24, 0x02	; 2
 658:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 65c:	08 95       	ret

0000065e <LED0_Toggle>:
}


void LED0_Toggle(void)
{
	DIO_TogglePin(DIO_PORTC,DIO_PIN2);
 65e:	62 e0       	ldi	r22, 0x02	; 2
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_TogglePin>
 666:	08 95       	ret

00000668 <main>:
#define  F_CPU   8000000
#include <util/delay.h>


int main(void)
{
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	00 d0       	rcall	.+0      	; 0x66e <main+0x6>
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
    uint8 RX=0;
    uint8 TX=20;
	LCD_Init();
 672:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_Init>
	LED0_Init();
 676:	0e 94 29 03 	call	0x652	; 0x652 <LED0_Init>
	uint16 Temp = 0;
 67a:	1a 82       	std	Y+2, r1	; 0x02
 67c:	19 82       	std	Y+1, r1	; 0x01
	TempSensor_Init();
 67e:	0e 94 a0 03 	call	0x740	; 0x740 <TempSensor_Init>
	 DcMotor_Init();
 682:	0e 94 5e 00 	call	0xbc	; 0xbc <DcMotor_Init>
	 ServoMotor_Init();
 686:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <ServoMotor_Init>
	 //DcMotor_SetSpeed(4);
	 //DcMotor_Start();
	 uint8 counter =0;

	
	SPI_Slave_Init();
 68a:	0e 94 84 03 	call	0x708	; 0x708 <SPI_Slave_Init>
	
    while (1) 
    {
		
		
	RX = SPI_TranSiver(TX);
 68e:	84 e1       	ldi	r24, 0x14	; 20
 690:	0e 94 9b 03 	call	0x736	; 0x736 <SPI_TranSiver>
		switch(RX)
 694:	81 33       	cpi	r24, 0x31	; 49
 696:	f9 f0       	breq	.+62     	; 0x6d6 <main+0x6e>
 698:	18 f4       	brcc	.+6      	; 0x6a0 <main+0x38>
 69a:	80 33       	cpi	r24, 0x30	; 48
 69c:	31 f0       	breq	.+12     	; 0x6aa <main+0x42>
 69e:	f7 cf       	rjmp	.-18     	; 0x68e <main+0x26>
 6a0:	82 33       	cpi	r24, 0x32	; 50
 6a2:	e1 f0       	breq	.+56     	; 0x6dc <main+0x74>
 6a4:	83 33       	cpi	r24, 0x33	; 51
 6a6:	19 f1       	breq	.+70     	; 0x6ee <main+0x86>
 6a8:	f2 cf       	rjmp	.-28     	; 0x68e <main+0x26>
		{
			case '0' :
			TempSensor_Read(&Temp);
 6aa:	ce 01       	movw	r24, r28
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	0e 94 a3 03 	call	0x746	; 0x746 <TempSensor_Read>
			
			
			LCD_Clear();
 6b2:	0e 94 25 03 	call	0x64a	; 0x64a <LCD_Clear>
			
			LCD_WriteInteger(Temp);
 6b6:	69 81       	ldd	r22, Y+1	; 0x01
 6b8:	7a 81       	ldd	r23, Y+2	; 0x02
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 99 02 	call	0x532	; 0x532 <LCD_WriteInteger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c2:	2f ef       	ldi	r18, 0xFF	; 255
 6c4:	84 e3       	ldi	r24, 0x34	; 52
 6c6:	9c e0       	ldi	r25, 0x0C	; 12
 6c8:	21 50       	subi	r18, 0x01	; 1
 6ca:	80 40       	sbci	r24, 0x00	; 0
 6cc:	90 40       	sbci	r25, 0x00	; 0
 6ce:	e1 f7       	brne	.-8      	; 0x6c8 <main+0x60>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <main+0x6a>
 6d2:	00 00       	nop
 6d4:	dc cf       	rjmp	.-72     	; 0x68e <main+0x26>
			_delay_ms(500);
			break;
			
			
			case '1' :
			LED0_Toggle();
 6d6:	0e 94 2f 03 	call	0x65e	; 0x65e <LED0_Toggle>
			break;
 6da:	d9 cf       	rjmp	.-78     	; 0x68e <main+0x26>
			
			
			
			case '2':
			 DcMotor_SetDir(CLOCK_WISE_DIR);
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	0e 94 6b 00 	call	0xd6	; 0xd6 <DcMotor_SetDir>
			 DcMotor_SetSpeed(10);
 6e2:	8a e0       	ldi	r24, 0x0A	; 10
 6e4:	0e 94 86 00 	call	0x10c	; 0x10c <DcMotor_SetSpeed>
			DcMotor_Start();
 6e8:	0e 94 8e 00 	call	0x11c	; 0x11c <DcMotor_Start>
			break;
 6ec:	d0 cf       	rjmp	.-96     	; 0x68e <main+0x26>
			
			case '3':
			DcMotor_Stop();
 6ee:	0e 94 91 00 	call	0x122	; 0x122 <DcMotor_Stop>
			break;
 6f2:	cd cf       	rjmp	.-102    	; 0x68e <main+0x26>

000006f4 <ServoMotor_Init>:
#include "Servo.h"


void ServoMotor_Init(void)
{
	DIO_SetPinDir(DIO_PORTD ,DIO_PIN5, DIO_PIN_OUTPUT);
 6f4:	41 e0       	ldi	r20, 0x01	; 1
 6f6:	65 e0       	ldi	r22, 0x05	; 5
 6f8:	83 e0       	ldi	r24, 0x03	; 3
 6fa:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
	PWM1_Init();
 6fe:	0e 94 63 04 	call	0x8c6	; 0x8c6 <PWM1_Init>
	PWM1_Start();
 702:	0e 94 6e 04 	call	0x8dc	; 0x8dc <PWM1_Start>
 706:	08 95       	ret

00000708 <SPI_Slave_Init>:
	DIO_WritePin(DIO_PORTB ,DIO_PIN4, DIO_PIN_LOW);
}

void SPI_Master_TermTrans(void)
{
	DIO_WritePin(DIO_PORTB ,DIO_PIN4, DIO_PIN_HIGH);
 708:	40 e0       	ldi	r20, 0x00	; 0
 70a:	64 e0       	ldi	r22, 0x04	; 4
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	65 e0       	ldi	r22, 0x05	; 5
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	66 e0       	ldi	r22, 0x06	; 6
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 726:	40 e0       	ldi	r20, 0x00	; 0
 728:	67 e0       	ldi	r22, 0x07	; 7
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	0e 94 9c 00 	call	0x138	; 0x138 <DIO_SetPinDir>
 730:	83 e4       	ldi	r24, 0x43	; 67
 732:	8d b9       	out	0x0d, r24	; 13
 734:	08 95       	ret

00000736 <SPI_TranSiver>:
uint8 SPI_TranSiver(uint8 trans_data)
{
	
	uint8 rec_data = 0;
	
	SPI->SPDR = trans_data ; 
 736:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT(SPI->SPSR , 7) == 0);
 738:	77 9b       	sbis	0x0e, 7	; 14
 73a:	fe cf       	rjmp	.-4      	; 0x738 <SPI_TranSiver+0x2>
	
	rec_data = SPI->SPDR ; 
 73c:	8f b1       	in	r24, 0x0f	; 15
	
	return rec_data ;
	
 73e:	08 95       	ret

00000740 <TempSensor_Init>:


void TempSensor_Init(void)
{
	
	ADC_Init();
 740:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Init>
 744:	08 95       	ret

00000746 <TempSensor_Read>:
void TempSensor_Read(uint16* Temp)
{
	
	//uint16 Analog_Value = 0;
	
	ADC_Read(Temp); 
 746:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Read>
 74a:	08 95       	ret

0000074c <__vector_11>:
}


void PWM1_Generate(uint32 DutyCycle)
{
	OCR1A = ((DutyCycle * 652 ) /100 ) - 1;
 74c:	1f 92       	push	r1
 74e:	0f 92       	push	r0
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	0f 92       	push	r0
 754:	11 24       	eor	r1, r1
 756:	2f 93       	push	r18
 758:	3f 93       	push	r19
 75a:	4f 93       	push	r20
 75c:	5f 93       	push	r21
 75e:	6f 93       	push	r22
 760:	7f 93       	push	r23
 762:	8f 93       	push	r24
 764:	9f 93       	push	r25
 766:	af 93       	push	r26
 768:	bf 93       	push	r27
 76a:	ef 93       	push	r30
 76c:	ff 93       	push	r31
 76e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter.1638>
 772:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <counter.1638+0x1>
 776:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <counter.1638+0x2>
 77a:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <counter.1638+0x3>
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	a1 1d       	adc	r26, r1
 782:	b1 1d       	adc	r27, r1
 784:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counter.1638>
 788:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <counter.1638+0x1>
 78c:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <counter.1638+0x2>
 790:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <counter.1638+0x3>
 794:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <Number_OverFlows>
 798:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <Number_OverFlows+0x1>
 79c:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <Number_OverFlows+0x2>
 7a0:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <Number_OverFlows+0x3>
 7a4:	84 17       	cp	r24, r20
 7a6:	95 07       	cpc	r25, r21
 7a8:	a6 07       	cpc	r26, r22
 7aa:	b7 07       	cpc	r27, r23
 7ac:	81 f4       	brne	.+32     	; 0x7ce <__vector_11+0x82>
 7ae:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <CounterRegister_InitValue>
 7b2:	82 bf       	out	0x32, r24	; 50
 7b4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter.1638>
 7b8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counter.1638+0x1>
 7bc:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <counter.1638+0x2>
 7c0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <counter.1638+0x3>
 7c4:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <timer0_ptr_func>
 7c8:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <timer0_ptr_func+0x1>
 7cc:	09 95       	icall
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	bf 91       	pop	r27
 7d4:	af 91       	pop	r26
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	7f 91       	pop	r23
 7dc:	6f 91       	pop	r22
 7de:	5f 91       	pop	r21
 7e0:	4f 91       	pop	r20
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <__vector_7>:
 7f0:	1f 92       	push	r1
 7f2:	0f 92       	push	r0
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	0f 92       	push	r0
 7f8:	11 24       	eor	r1, r1
 7fa:	2f 93       	push	r18
 7fc:	3f 93       	push	r19
 7fe:	4f 93       	push	r20
 800:	5f 93       	push	r21
 802:	6f 93       	push	r22
 804:	7f 93       	push	r23
 806:	8f 93       	push	r24
 808:	9f 93       	push	r25
 80a:	af 93       	push	r26
 80c:	bf 93       	push	r27
 80e:	ef 93       	push	r30
 810:	ff 93       	push	r31
 812:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 816:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 81a:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 81e:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	a1 1d       	adc	r26, r1
 826:	b1 1d       	adc	r27, r1
 828:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 82c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 830:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 834:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 838:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <Num_CompMatch>
 83c:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <Num_CompMatch+0x1>
 840:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <Num_CompMatch+0x2>
 844:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <Num_CompMatch+0x3>
 848:	84 17       	cp	r24, r20
 84a:	95 07       	cpc	r25, r21
 84c:	a6 07       	cpc	r26, r22
 84e:	b7 07       	cpc	r27, r23
 850:	69 f4       	brne	.+26     	; 0x86c <__stack+0xd>
 852:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 856:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 85a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 85e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 862:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <timer1_ptr_func>
 866:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <timer1_ptr_func+0x1>
 86a:	09 95       	icall
 86c:	ff 91       	pop	r31
 86e:	ef 91       	pop	r30
 870:	bf 91       	pop	r27
 872:	af 91       	pop	r26
 874:	9f 91       	pop	r25
 876:	8f 91       	pop	r24
 878:	7f 91       	pop	r23
 87a:	6f 91       	pop	r22
 87c:	5f 91       	pop	r21
 87e:	4f 91       	pop	r20
 880:	3f 91       	pop	r19
 882:	2f 91       	pop	r18
 884:	0f 90       	pop	r0
 886:	0f be       	out	0x3f, r0	; 63
 888:	0f 90       	pop	r0
 88a:	1f 90       	pop	r1
 88c:	18 95       	reti

0000088e <PWM0_Init>:
 88e:	bb 9a       	sbi	0x17, 3	; 23
 890:	83 b7       	in	r24, 0x33	; 51
 892:	88 64       	ori	r24, 0x48	; 72
 894:	83 bf       	out	0x33, r24	; 51
 896:	83 b7       	in	r24, 0x33	; 51
 898:	80 62       	ori	r24, 0x20	; 32
 89a:	83 bf       	out	0x33, r24	; 51
 89c:	08 95       	ret

0000089e <PWM0_Generate>:
 89e:	20 e0       	ldi	r18, 0x00	; 0
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	38 2f       	mov	r19, r24
 8a4:	36 95       	lsr	r19
 8a6:	27 95       	ror	r18
 8a8:	36 95       	lsr	r19
 8aa:	27 95       	ror	r18
 8ac:	ab e7       	ldi	r26, 0x7B	; 123
 8ae:	b4 e1       	ldi	r27, 0x14	; 20
 8b0:	0e 94 b3 04 	call	0x966	; 0x966 <__umulhisi3>
 8b4:	96 95       	lsr	r25
 8b6:	87 95       	ror	r24
 8b8:	81 50       	subi	r24, 0x01	; 1
 8ba:	8c bf       	out	0x3c, r24	; 60
 8bc:	08 95       	ret

000008be <PWM0_Start>:
 8be:	83 b7       	in	r24, 0x33	; 51
 8c0:	83 60       	ori	r24, 0x03	; 3
 8c2:	83 bf       	out	0x33, r24	; 51
 8c4:	08 95       	ret

000008c6 <PWM1_Init>:
 8c6:	8f b5       	in	r24, 0x2f	; 47
 8c8:	82 68       	ori	r24, 0x82	; 130
 8ca:	8f bd       	out	0x2f, r24	; 47
 8cc:	8e b5       	in	r24, 0x2e	; 46
 8ce:	8c 61       	ori	r24, 0x1C	; 28
 8d0:	8e bd       	out	0x2e, r24	; 46
 8d2:	8c e8       	ldi	r24, 0x8C	; 140
 8d4:	92 e0       	ldi	r25, 0x02	; 2
 8d6:	97 bd       	out	0x27, r25	; 39
 8d8:	86 bd       	out	0x26, r24	; 38
 8da:	08 95       	ret

000008dc <PWM1_Start>:
}


void PWM1_Start(void)
{
	TCCR1B |= 0x04;
 8dc:	8e b5       	in	r24, 0x2e	; 46
 8de:	84 60       	ori	r24, 0x04	; 4
 8e0:	8e bd       	out	0x2e, r24	; 46
 8e2:	08 95       	ret

000008e4 <__udivmodsi4>:
 8e4:	a1 e2       	ldi	r26, 0x21	; 33
 8e6:	1a 2e       	mov	r1, r26
 8e8:	aa 1b       	sub	r26, r26
 8ea:	bb 1b       	sub	r27, r27
 8ec:	fd 01       	movw	r30, r26
 8ee:	0d c0       	rjmp	.+26     	; 0x90a <__udivmodsi4_ep>

000008f0 <__udivmodsi4_loop>:
 8f0:	aa 1f       	adc	r26, r26
 8f2:	bb 1f       	adc	r27, r27
 8f4:	ee 1f       	adc	r30, r30
 8f6:	ff 1f       	adc	r31, r31
 8f8:	a2 17       	cp	r26, r18
 8fa:	b3 07       	cpc	r27, r19
 8fc:	e4 07       	cpc	r30, r20
 8fe:	f5 07       	cpc	r31, r21
 900:	20 f0       	brcs	.+8      	; 0x90a <__udivmodsi4_ep>
 902:	a2 1b       	sub	r26, r18
 904:	b3 0b       	sbc	r27, r19
 906:	e4 0b       	sbc	r30, r20
 908:	f5 0b       	sbc	r31, r21

0000090a <__udivmodsi4_ep>:
 90a:	66 1f       	adc	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	1a 94       	dec	r1
 914:	69 f7       	brne	.-38     	; 0x8f0 <__udivmodsi4_loop>
 916:	60 95       	com	r22
 918:	70 95       	com	r23
 91a:	80 95       	com	r24
 91c:	90 95       	com	r25
 91e:	9b 01       	movw	r18, r22
 920:	ac 01       	movw	r20, r24
 922:	bd 01       	movw	r22, r26
 924:	cf 01       	movw	r24, r30
 926:	08 95       	ret

00000928 <__divmodsi4>:
 928:	05 2e       	mov	r0, r21
 92a:	97 fb       	bst	r25, 7
 92c:	1e f4       	brtc	.+6      	; 0x934 <__divmodsi4+0xc>
 92e:	00 94       	com	r0
 930:	0e 94 ab 04 	call	0x956	; 0x956 <__negsi2>
 934:	57 fd       	sbrc	r21, 7
 936:	07 d0       	rcall	.+14     	; 0x946 <__divmodsi4_neg2>
 938:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__udivmodsi4>
 93c:	07 fc       	sbrc	r0, 7
 93e:	03 d0       	rcall	.+6      	; 0x946 <__divmodsi4_neg2>
 940:	4e f4       	brtc	.+18     	; 0x954 <__divmodsi4_exit>
 942:	0c 94 ab 04 	jmp	0x956	; 0x956 <__negsi2>

00000946 <__divmodsi4_neg2>:
 946:	50 95       	com	r21
 948:	40 95       	com	r20
 94a:	30 95       	com	r19
 94c:	21 95       	neg	r18
 94e:	3f 4f       	sbci	r19, 0xFF	; 255
 950:	4f 4f       	sbci	r20, 0xFF	; 255
 952:	5f 4f       	sbci	r21, 0xFF	; 255

00000954 <__divmodsi4_exit>:
 954:	08 95       	ret

00000956 <__negsi2>:
 956:	90 95       	com	r25
 958:	80 95       	com	r24
 95a:	70 95       	com	r23
 95c:	61 95       	neg	r22
 95e:	7f 4f       	sbci	r23, 0xFF	; 255
 960:	8f 4f       	sbci	r24, 0xFF	; 255
 962:	9f 4f       	sbci	r25, 0xFF	; 255
 964:	08 95       	ret

00000966 <__umulhisi3>:
 966:	a2 9f       	mul	r26, r18
 968:	b0 01       	movw	r22, r0
 96a:	b3 9f       	mul	r27, r19
 96c:	c0 01       	movw	r24, r0
 96e:	a3 9f       	mul	r26, r19
 970:	70 0d       	add	r23, r0
 972:	81 1d       	adc	r24, r1
 974:	11 24       	eor	r1, r1
 976:	91 1d       	adc	r25, r1
 978:	b2 9f       	mul	r27, r18
 97a:	70 0d       	add	r23, r0
 97c:	81 1d       	adc	r24, r1
 97e:	11 24       	eor	r1, r1
 980:	91 1d       	adc	r25, r1
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
